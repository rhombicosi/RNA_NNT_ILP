import re
from binary_variables import *

filepath = f'{chain_f}-decomposition.sol'
ref_brackets = '(((((.(((((((((((((........))))))).))).))).)))))'   

def pairs2brackets(filepath, RNA):
    lngth = len(RNA)
    print(lngth)

    pattern = "\((.*?)\)"

    fold = ["." for _ in range(lngth)] 
        
    with open(filepath) as fp:

        line = fp.readline()      
        cnt = 1
        pairs = []
        
        while line: 
            
            if " 1" in line and "Q(" in line:
                print("Line {}: {}".format(cnt, line.strip()))
            
            if " 1" in line and "F(" in line:
                print("Line {}: {}".format(cnt, line.strip()))

            if " 1" in line and "L(" in line:
                print("Line {}: {}".format(cnt, line.strip()))

            if " 1" in line and "H(" in line:
                print("Line {}: {}".format(cnt, line.strip()))
            
            if " 1" in line and "I(" in line:
                print("Line {}: {}".format(cnt, line.strip()))

            if " 1" in line and "B(" in line:
                print("Line {}: {}".format(cnt, line.strip()))

            if " 1" in line and "P(" in line:
                print("Line {}: {}".format(cnt, line.strip()))
                substring = re.search(pattern, line).group(1)
                indices = substring.split(",")
            
                i = int(indices[0])
                j = int(indices[1])

                pairs.append((i,j))
                fold[i - 1] = "("
                fold[j - 1] = ")"
                
            line = fp.readline()
            # p_str = line.find("P(")
            cnt += 1

    fold = ''.join([str(elem) for elem in fold])

    return(fold,pairs)

def brackets2pairs(dot_bracket):
    pair_stack = []
    base_pairs = []

    for i, symbol in enumerate(dot_bracket, start=1):
        if symbol in "({[":
            pair_stack.append(i)
        elif symbol in ")}]":
            if pair_stack:
                j = pair_stack.pop()
                base_pairs.append((j, i))

    sorted_bp = sorted(base_pairs, key=lambda x: x[0])

    return sorted_bp


def compare2folds(generated, reference):
    beta = 2
    TP = len(reference.intersection(generated)) # pairs that have been identified correctly
    FN = len(reference - generated) # pairs that have not been identified
    FP = len(generated - reference) # pairs that have been identified as part of the structure incorrectly

    # precision = TP/(TP + FP)
    # recall = TP/(TP + FN)
    f1 = 2*TP/(2*TP + FP + FN)
    fbeta = (1+beta**2)*TP/((1+beta**2)*TP + (beta**2)*FN + FP)

    # print(TP)
    # print(FN)
    # print(FP)

    return (f1,fbeta)

(gen_brackets, gen_pairs) = pairs2brackets(filepath, RNA)

print(gen_brackets)
print(gen_pairs)

# pairs generated by the model and pairs of a reference structure
generated = set(gen_pairs)
reference = set(brackets2pairs(ref_brackets))

(f1,fbeta) = compare2folds(generated, reference)

print(f1)
print(fbeta)

# import sys

# first argument is a full path to a solution file 
# fn = sys.argv[1]
#second argument is a rna sequence length


